name: Search Products Batch

on:
  # Allow manual triggering of the workflow  
  workflow_dispatch:
    inputs:
      batch_file:
        description: 'Batch file path (relative to repository root)'
        required: false
        default: 'batch.txt'
      description:
        description: 'Description of the batch search (optional)'
        required: false
        default: 'Manual batch search of products catalog'

jobs:
  search-batch:
    name: Search Products Batch in MongoDB Catalog
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: make install
        
    - name: Verify batch file exists
      run: |
        BATCH_FILE="${{ github.event.inputs.batch_file }}"
        if [ ! -f "$BATCH_FILE" ]; then
          echo "‚ùå Error: Batch file '$BATCH_FILE' not found"
          echo "Available files:"
          ls -la *.txt || echo "No .txt files found"
          exit 1
        fi
        echo "‚úÖ Batch file '$BATCH_FILE' found"
        echo "üìù Contents preview:"
        head -5 "$BATCH_FILE"
        TOTAL_LINES=$(wc -l < "$BATCH_FILE")
        echo "üìä Total products to search: $TOTAL_LINES"
        
    - name: Search products batch
      env:
        MONGO_URI: ${{ secrets.MONGO_URI }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "üîç Starting batch product search..."
        echo "Batch file: '${{ github.event.inputs.batch_file }}'"
        echo "Description: ${{ github.event.inputs.description }}"
        if [ -n "$OPENAI_API_KEY" ]; then
          echo "ü§ñ OpenAI integration: Enabled"
        else
          echo "ü§ñ OpenAI integration: Disabled (no API key)"
        fi
        echo ""
        
        # Activate virtual environment and run batch search
        source venv/bin/activate
        python3 search_batch.py -b "${{ github.event.inputs.batch_file }}"
        
        echo "‚úÖ Batch product search completed!"
        
    - name: List output files
      run: |
        echo "Generated files:"
        ls -la batch_search_results_*.csv || echo "No batch search result files found"
        ls -la openai_*_conversation.json || echo "No conversation files found"
        
    - name: Upload batch search results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: batch-search-results
        path: |
          batch_search_results_*.csv
          openai_*_conversation.json
        retention-days: 30
        
    - name: Upload batch search summary
      if: always()
      run: |
        echo "## üîç Batch Product Search Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Batch File**: \`${{ github.event.inputs.batch_file }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Description**: ${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results:" >> $GITHUB_STEP_SUMMARY
        
        # Check if batch search results file exists and show summary
        if [ -f batch_search_results_*.csv ]; then
          RESULT_FILE=$(ls batch_search_results_*.csv | head -1)
          echo "‚úÖ **Status**: Batch search completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ **Results File**: \`$RESULT_FILE\`" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Artifacts**: Batch search results uploaded as 'batch-search-results'" >> $GITHUB_STEP_SUMMARY
          
          # Show CSV summary
          if [ -f "$RESULT_FILE" ]; then
            TOTAL_ROWS=$(wc -l < "$RESULT_FILE")
            # Count how many different search types are present (Mongo, Fuzzy, gpt-3.5, gpt-4)
            SEARCH_TYPES=$(head -20 "$RESULT_FILE" | grep -o '\.[A-Za-z0-9-]*' | sort -u | wc -l)
            PRODUCT_COUNT=$(( ($TOTAL_ROWS - 1) / $SEARCH_TYPES ))
            echo "  - **Total Products Searched**: $PRODUCT_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "  - **Total Result Rows**: $(($TOTAL_ROWS - 1)) (excluding header)" >> $GITHUB_STEP_SUMMARY
            echo "  - **Search Types per Product**: $SEARCH_TYPES (Mongo, Fuzzy, and OpenAI if enabled)" >> $GITHUB_STEP_SUMMARY
            echo "  - **Format**: CSV with columns: Number, Input string, Given Name, Score, ID" >> $GITHUB_STEP_SUMMARY
            
            # Check if OpenAI results are present
            if grep -q 'level-' "$RESULT_FILE"; then
              echo "  - **ü§ñ OpenAI Results**: Present (level-1 and level-2 rows included)" >> $GITHUB_STEP_SUMMARY
              
              # Check for conversation files
              if [ -f openai_level1_conversation.json ] || [ -f openai_level2_conversation.json ]; then
                echo "  - **üí¨ Conversation Files**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "  - **ü§ñ OpenAI Results**: Not present (high scores or no API key)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "‚ùå **Status**: Batch search failed - no results file generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚è∞ **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "üîó **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY