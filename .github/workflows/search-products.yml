name: Search Products Catalog

on:
  # Allow manual triggering of the workflow with string input
  workflow_dispatch:
    inputs:
      search_string:
        description: 'Text to search for in the products catalog'
        required: true
        default: 'chocolate'
      description:
        description: 'Description of the search (optional)'
        required: false
        default: 'Manual search of products catalog'

jobs:
  search-products:
    name: Search Products in MongoDB Catalog
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: make install
        
    - name: Search products catalog
      env:
        MONGO_URI: ${{ secrets.MONGO_URI }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "🔍 Starting product search..."
        echo "Search string: '${{ github.event.inputs.search_string }}'"
        echo "Description: ${{ github.event.inputs.description }}"
        if [ -n "$OPENAI_API_KEY" ]; then
          echo "🤖 OpenAI integration: Enabled"
        else
          echo "🤖 OpenAI integration: Disabled (no API key)"
        fi
        echo ""
        
        # Activate virtual environment and run search
        source venv/bin/activate
        python3 search_products.py "${{ github.event.inputs.search_string }}"
        
        echo "✅ Product search completed!"
        
    - name: List output files
      run: |
        echo "Generated files:"
        ls -la search_results_*.json || echo "No search result files found"
        ls -la openai_*_conversation.json || echo "No conversation files found"
        
    - name: Upload search results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: product-search-results
        path: |
          search_results_*.json
          openai_*_conversation.json
        retention-days: 30
        
    - name: Upload search summary
      if: always()
      run: |
        echo "## 🔍 Product Search Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Search String**: \`${{ github.event.inputs.search_string }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Description**: ${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results:" >> $GITHUB_STEP_SUMMARY
        
        # Check if search results file exists and show summary
        if [ -f search_results_*.json ]; then
          RESULT_FILE=$(ls search_results_*.json | head -1)
          echo "✅ **Status**: Search completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Results File**: \`$RESULT_FILE\`" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Artifacts**: Search results uploaded as 'product-search-results'" >> $GITHUB_STEP_SUMMARY
          
          # Try to extract counts from the JSON file
          if command -v jq > /dev/null; then
            DIRECT_COUNT=$(jq -r '.direct_search.count // 0' "$RESULT_FILE" 2>/dev/null || echo "0")
            WORD_COUNT=$(jq -r '.word_search.count // 0' "$RESULT_FILE" 2>/dev/null || echo "0")
            echo "  - **Direct Search Results**: $DIRECT_COUNT products found" >> $GITHUB_STEP_SUMMARY
            echo "  - **Word-based Search Results**: $WORD_COUNT products found" >> $GITHUB_STEP_SUMMARY
            
            # Check for OpenAI results
            if jq -e '.openai_level1' "$RESULT_FILE" > /dev/null 2>&1; then
              LEVEL1_DECISION=$(jq -r '.openai_level1.decision // "unknown"' "$RESULT_FILE" 2>/dev/null || echo "unknown")
              LEVEL2_DECISION=$(jq -r '.openai_level2.decision // "unknown"' "$RESULT_FILE" 2>/dev/null || echo "unknown")
              echo "  - **🤖 Level 1 Model Analysis**: $LEVEL1_DECISION" >> $GITHUB_STEP_SUMMARY
              echo "  - **🤖 Level 2 Model Analysis**: $LEVEL2_DECISION" >> $GITHUB_STEP_SUMMARY
              
              # Check for conversation files
              if [ -f openai_level1_conversation.json ] || [ -f openai_level2_conversation.json ]; then
                echo "  - **💬 Conversation Files**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "  - **🤖 OpenAI Integration**: Not used (high scores or no API key)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "❌ **Status**: Search failed - no results file generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⏰ **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY